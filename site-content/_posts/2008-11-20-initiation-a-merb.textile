---
layout: post
title: Initiation à Merb
---

h1. {{ page.title }}

p(meta). 20 Nov 2008 - Toulouse

Merb, nouveau framework Ruby, est le remplaçant officiel de Ruby on Rails.

Ruby on Rails est le framework de référence de développement web depuis quelques années, il permet de monter n'importe quelle application web en suivant la règle du 80-20: 80% des fonctionnalités en 20% du temps. Les limites de Rails se posent pour les 20% de fonctionnalités restantes de votre application, qui peuvent prendre un temps considérable à développer.

Merb a été conçu a partir de ce principe, avec l'expérience obtenu dans Rails, en reprenant ses principes et en le modulant afin de réduire le coût machine.

"Pastie de la première version de Merb le 22 Septembre 2006":http://pastie.org/14416

h2. Les bases

Voici une série de tutorials, vidéo et liens vers de la documentation:

* "Repository officiel de Merb":http://github.com/wycats/merb/ sur Github
* "Keynote du Merbcamp":http://merbcamp.com/video/zygmuntowicz.mp4 (vidéo, mp4), introduction de Merb par son créateur, souligne les bons points du framework. Seule la première partie de la vidéo est consacrée à Merb, la suite parle de "Nanite":http://github.com/ezmobius/nanite/, un système de daemons Ruby pour monter du Cloud Computing
* "Wiki officiel de Merbivore":http://wiki.merbivore.com/ avec beaucoup d'aide

h2. Le Routeur Merb

* "Merb plumbing: The router":http://merbcamp.com/images/watch.gif (vidéo, mp4)
* "Slides de la conférence":http://www.slideshare.net/carllerche/merb-pluming-the-router-presentation

Exemple d'une route customisée:

<pre>
<code>
Merb::Router.prepare do
	match(:domain => "mydomain.com") do
		match("/this-article", :method => "get").
		  to(:articles)
		# another route
	end
end		
</code>
</pre>

Résolution du problème de sous-domaine:

<pre>
<code>
	match(:subdomain => /(.*)/).
	to(account => "subdomain[1]") do
		#application routes here
end		
</code>
</pre>

_defer_to_ ajouter une couche logique dans le routeur:

<pre>
<code>
match("/articles/:url").defer_to |request, param|

	if article = Article.first(:url => params[:url])
		# Article trouvée avec :url courante
		params.merge(:articles, article)
	elsif article = Article.first(:id => params[:url])
		# Article trouvée avec :id présent dans l'url
		# se diriger vers le bon article
		redirect url(:articles, article.url)
	else
		# Route not matching, continue on router matches
		false
	end
	
end
</code>
</pre>

Dans la lib des slices, on peut rajouter facilement des routes au routeur:

<pre>
<code>
# Setup routes inside the host application
#
# @param scope<Merb::Router::Behaviour>
#  Routes will be added within this scope (namespace). In fact, any 
#  router behaviour is a valid namespace, so you can attach
#  routes at any level of your router setup.
#
# @note prefix your named routes with :mauth_password_slice_
#   to avoid potential conflicts with global named routes.
def self.setup_router(scope)
  # example of a named route      
  scope.match("/login", :method => :get ).to(:controller => "/exceptions",  :action => "unauthenticated").name(:login)
  scope.match("/login", :method => :put ).to(:controller => "sessions",     :action => "update"         ).name(:perform_login)
  scope.match("/logout"                 ).to(:controller => "sessions",     :action => "destroy"        ).name(:logout)
end
</code>
</pre>

h2. Projets à suivre

* "Gluttonberg:":http://github.com/lukesutton/gluttonberg/ Slice CMS pour Merb - "Wiki":http://github.com/lukesutton/gluttonberg/wikis
* "minigems:":http://github.com/fabien/minigems/ Version light de Rubygems pour charger les gems avec moins d'espace mémoire
* "Déploiement d'application Merb avec Vlad et Git":http://atmos.org/index.php/2008/10/19/multi-environment-merbdm-deployment-with-vladgit/